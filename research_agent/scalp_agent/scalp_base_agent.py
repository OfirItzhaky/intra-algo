"""
Abstract base class for all agents in the intraday trading research AI system.

This class defines the required interface for any agent (dynamic or predefined) that plugs into the dual-agent architecture.
Agents are managed by an AgentHandler and interact with the system via a shared InputContainer and user-defined parameters.
"""

from abc import ABC, abstractmethod
from typing import Dict, List, Any
from .input_container import InputContainer

class BaseAgent(ABC):
    @abstractmethod
    def analyze(
        self,
        input_container: InputContainer,
        user_params: Dict[str, Any]
    ) -> Dict[str, Any]:
        """
        Analyze the provided input container and user parameters to generate trading insights.

        Args:
            input_container (InputContainer): The current bundle of market and chart data for analysis.
            user_params (Dict[str, Any]): User-defined parameters to customize the agent's behavior or strategy.

        Returns:
            Dict[str, Any]: A dictionary containing at least the following keys:
                - indicators (List[str]): List of indicator names or descriptions used in the analysis.
                - strategies (List[Dict[str, Any]] or List[str]): List of strategy objects or descriptions generated by the agent.
                - summary (str): Human-readable summary of the agent's analysis and recommendations.
        """
        pass

    @staticmethod
    def clean_for_json(obj):
        import datetime
        if isinstance(obj, dict):
            return {k: BaseAgent.clean_for_json(v) for k, v in obj.items()}
        elif isinstance(obj, list):
            return [BaseAgent.clean_for_json(v) for v in obj]
        elif isinstance(obj, (datetime.datetime, datetime.date)):
            return obj.isoformat()
        else:
            return obj
